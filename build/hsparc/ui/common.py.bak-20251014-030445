# hsparc/ui/common.py
from __future__ import annotations

from pathlib import Path
from threading import Event
from typing import Literal

from PySide6.QtCore import Qt
from PySide6.QtGui import QPixmap
from PySide6.QtWidgets import QWidget, QVBoxLayout, QLabel
import os
from PySide6.QtGui import QGuiApplication

def is_kiosk() -> bool:
    return os.environ.get("HSPARC_KIOSK", "0") == "1"

def center_on_screen(w: QWidget) -> None:
    screen = QGuiApplication.primaryScreen()
    if not screen:
        return
    geo = screen.availableGeometry()
    frame = w.frameGeometry()
    frame.moveCenter(geo.center())
    w.move(frame.topLeft())

def show_fullscreen_or_center(w: QWidget, prefer_fullscreen: bool = True) -> None:
    """
    In kiosk or when prefer_fullscreen=True, go fullscreen.
    Otherwise show() and center on the primary screen.
    """
    if is_kiosk() or prefer_fullscreen:
        w.showFullScreen()
    else:
        w.show()
        center_on_screen(w)

# ---------- IDs ----------
def new_uuid() -> str:
    import uuid as _uuid
    return str(_uuid.uuid4())


# ---------- Input-capture gate ----------
# Default: ALLOWED (set) so development is frictionless.
# Playback/review code can temporarily block; recorder/observer bypass via context.
CAPTURE_ENABLED: Event = Event()
CAPTURE_ENABLED.set()

def allow_input_capture() -> None:
    """Globally allow recording of input events (used by recorder/observer prep, tests, etc.)."""
    CAPTURE_ENABLED.set()

def block_input_capture(reason: str = "") -> None:
    """Globally block recording of input events (used in pure playback/review modes)."""
    CAPTURE_ENABLED.clear()

def capture_gate_is_open() -> bool:
    """Return True if the global gate is open."""
    return CAPTURE_ENABLED.is_set()

ContextName = Literal["", "recorder", "observer", "playback", "researcher"]

def capture_allowed_for(context: str = "") -> bool:
    if context in ("recorder", "observer"):
        return True
    return CAPTURE_ENABLED.is_set()


# ---------- UI helpers ----------
def make_cover_widget() -> QWidget:
    """
    Simple black cover with optional logo at ~/.local/share/hsparc/logo.png
    Used to hide the video surface when no media is loaded to avoid
    the 'hall of mirrors' effect from an uninitialized widget.
    """
    w = QWidget()
    w.setStyleSheet("background-color: black;")
    lay = QVBoxLayout(w)
    lay.setContentsMargins(0, 0, 0, 0)
    lay.setAlignment(Qt.AlignCenter)

    logo_path = Path.home() / ".local" / "share" / "hsparc" / "logo.png"
    if logo_path.exists():
        lbl = QLabel()
        pm = QPixmap(str(logo_path))
        lbl.setPixmap(pm.scaled(360, 360, Qt.KeepAspectRatio, Qt.SmoothTransformation))
        lbl.setAlignment(Qt.AlignCenter)
        lay.addWidget(lbl)
    else:
        lbl = QLabel("HSPARC")
        lbl.setStyleSheet("color: #E8E8E8; font-size: 28px; font-weight: 700;")
        lbl.setAlignment(Qt.AlignCenter)
        lay.addWidget(lbl)

    return w
